---
converter: markdown
metadata:
  title: Using Gatsby with platformOS
  description: This use case describes how to configure Gatsby for them to work in platformOS
---

This use case describes how to configure Gatsby for them to work in platformOS

## Intro

In the pursue of performance, flexibility and developer's experience a lot of front-end developers turned their heads to static site generators like Gatsby.

[Gatsby](gatsbyjs.org/) is a static site generator based on React.js and has gained a lot of popularity because of its good performance, documentation, plugins ecosystem and integrations with hostings.

Gatsby has a very nice architecture, where data can be pulled on build time from various sources to build static html, or during runtime in the browser, using standard AJAX using React.

Read more [how Gatsby connects can pull data from multiple sources](https://www.gatsbyjs.org/docs/content-and-data/).

Because static site generators output are assets and html files, platformOS can be used as a hosting platform for that kind of content.

## Three steps of the migration

No matter which static site generator you chose for your project ([there is plenty](https://www.staticgen.com/)), there are always the same things to consider when using it with platformOS.

### Pages (routes)

* Entry file should be named `index.html`. Thats usually given by default
* To make urls pretty, routes should be as a `about-us/index.html` fashion. For example, if you want to have `/contact` page, the best way is to have `app/views/pages/contact/index.html` file. Thats usually given by default
* HTML files need to land in `app/views/pages` directory. This is what we need to do

### Assets

All other files (assets: js, css, images, fonts, etc.) need to be in `app/assets` directory. This is what we need to do


It is a good practice to use `asset_path`.

## Migration

For our example migration we took [official Gatsby Blog](https://github.com/gatsbyjs/gatsby-starter-blog) repository.

It includes markdown processing (all the blog posts are written in markdown), image generation using sharp, and couple more.

After building the project by default you will get a lot of files in `public/` directory. This is where output files are located. By default all files are generated there with no separation. We want a little bit more structure.

### Assets

To put all the assets into `public/assets` directory instead of just `public/` we used `gatsby-plugin-asset-path`.

```shell
$ npm i gatsby-plugin-asset-path
```

And activated it:

##### gatsby-config.js

```diff
module.exports = {
+  assetPrefix: "assets/",
...
plugins: [
+ {
+   resolve: "gatsby-plugin-asset-path",
+ },
```

Gatsby also need a `--prefix-paths` flag in its build command to make use of this option:

##### package.json

```diff
+ "build": "gatsby build --prefix-paths",
```

We will also add `gatsby-plugin-no-sourcemaps` because we don't need sourcemaps.

```shell
$ npm i gatsby-plugin-no-sourcemaps
```

```diff
plugins: [
+ {
+   resolve: "gatsby-plugin-no-sourcemaps",
+ },
```

Now assets are in separate directory and public/ directory is much cleaner:

```shell
$ ls -l public
404
404.html
assets
chunk-map.json
favicon-32x32.png
favicon.ico
hello-world
icons
index.html
manifest.webmanifest
my-second-post
new-beginnings
robots.txt
webpack.stats.json
```

Now all we need to do it to move assets to `app/assets`. We chose `rsync` and basic bash commands for that task.

```shell
rsync -a -m --include '*/' --exclude '*.html' public app && \
rsync -a -v app/public/assets/ app/public && rm -rf app/public/assets && \
mv -f app/public app/assets
```

First line is copying all non .html files from `public` directory to `app/public` while preserving directory structure.
Second line is flattening the structure, because some files are now in `app/public/assets` and we want them in `app/public`. This step is an intermediary step before structure is stabilized.
Third line is renaming `app/public` to `app/assets` as a final step.

### Pages

Public directory has some directories with index.html files inside of them. Those are our pages.

Lets use rsync to move them to correct place.

```shell
rsync -a -m --include '*/' --include '*.html' --exclude '*' public app/views && \
mv -f app/views/public app/views/pages
```

First line is copying html files from public to views preserving directory structure.
Second line is reaming `app/views/public` to `app/views/pages` as a final step.

## Automating

Now that we have commands to do the migrtation for us, lets make our build more automated using npm tasks.

##### package.json

```json
+ "prepare:html": "rsync -a -m --include '*/' --include '*.html' --exclude '*' public app/views && mv -f app/views/public app/views/pages",
+ "prepare:assets": "rsync -a -m --include '*/' --exclude '*.html' public app && mv -f app/public app/assets",
+ "prebuild": "rm -rf public app/assets app/views/pages && mkdir -p app/views",
  "build": "gatsby build --prefix-paths",
```

Now, when we run `npm run build` it will prepare empty directories, build gatsby site, move necessary files into proper places.

## Result

The only thing left to do is to deploy the page.

```shell
pos-cli deploy production
```

You can see the result at: https://gatsby-blog.prod01.oregon.platform-os.com/
You can also see source code of this project on GitHub: https://github.com/mdyd-dev/demo-gatsby

## CDN note

Because assets can be accessed using relative paths to the instance domain, this is all there is to it to make it work, but if you want to make it even faster, you should use our CDN.

There are two ways of making this happen:

1. [asset_url liquid filter](/api-reference/liquid/platformos-filters#asset_url)
2. Setting up your asset builder to prefix URLs with your CDN path. There is a lot of ways to do it, two of them
    * One way of doing it we presented in the [Angular article](https://pawel-docs.staging.oregon.platform-os.com/use-cases/connecting-angular-spa-platformos#step-2-set-up-local-development-production-build-and-hosting)
    * Another way is to use [webpack-require-from](https://github.com/agoldis/webpack-require-from) plugin (we use it in our documentation project: [webpack config](https://github.com/mdyd-dev/nearme-documentation/blob/81976c414cd048d52e9e7dd4c1a2af76f1b3ec27/webpack.config.js#L18-L20), [liquid code](https://github.com/mdyd-dev/nearme-documentation/blob/81976c414cd048d52e9e7dd4c1a2af76f1b3ec27/app/views/partials/layouts/lib/context-variables.liquid#L2-L4))

Read more on [assets](/developer-guide/assets/assets#content).

Even though Gatsby tried to implement [support for CDN-hosted assets](https://github.com/gatsbyjs/gatsby/pull/12128) our minimal experience with Gatsby didn't allow us to use it with success. If you know how to leverage it, feel free to create a issue/PR in out [documentation repo](https://github.com/mdyd-dev/nearme-documentation/) with a hint.
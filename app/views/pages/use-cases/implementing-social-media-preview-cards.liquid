---
converter: markdown
metadata:
  title: Implementing social media preview cards
  description: Description
---

Promoting content on social media becomes important part of marketing nowadays. If you want to make sure your posts/tweets/stories are eye-catching or at least visible on the users wall you probably want to leverage [OpenGraph](https://ogp.me/) tags to provide additional metadata to your content that will inform not only search engines what your content is about, but also improve social media cards appearance.

## Problem

When we started posting content on social media we noticed that our social media cards were missing images, descriptions. We decided to fix that on our documentation website and it proved to be pretty easy to do.

To check if your site is already optimized, use following official tools:

* Twitter: https://cards-dev.twitter.com/validator
* Facebook: https://developers.facebook.com/tools/debug
* LinkedIn: https://www.linkedin.com/post-inspector

Ideally what you want to see is title, description and image showing up.

## Solution

Most of the metadata we used are standard OpenGraph.

### OpenGraph (Facebook, LinkedIn)

If you need more information about any of the properties used, read [OpenGraph](https://ogp.me/) official documentation.

```html
{% raw %}
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="article" />
<meta property="og:site_name" content="platformOS Documentation" />
<meta property="article:section" content="Uncategorized" />

<meta property="og:title" content="{{ title }}" />
<meta property="og:description" content="{{ description }}" />
<meta property="og:url" content="{{ context.location.url }}" />

<meta property="article:published_time" content="{{ dates.created_at }}" />
<meta property="article:modified_time" content="{{ dates.content_updated_at }}" />
<meta property="og:updated_time" content="{{ dates.content_updated_at }}" />

<meta property="og:image" content="{{ 'images/pos-logo.png' | asset_url }}" />
<meta property="og:image:width" content="730" />
<meta property="og:image:height" content="412" />
{% endraw %}
```

Some metadata we hardcoded because we did not see the need to make it dynamic. You might want to also add `author` - consult documentation to choose the best tags for your use case.

Let's explain the dynamic parts:

* `title` - it is a variable that we calculate based on what is in current page metadata. We reused our title tag content here
* `description` - same as above, we reused our usual meta data description content here
* `image` - absolute url to the image. Image we used is 713x412px dimensions, but you can experiment with dimensions that fit your content/logo better.
* `url` - absolute url to the page (with query params if essential)
* `published_time` - date when the content was first published - see below how we got `dates` object
* `modified_time` - datetime when content was last modified - see below how we got `dates` object
* `updated_time` - datetime when content was last modified - see below how we got `dates` object


#### Dates

We did not use dates before, so those needed to be pull out from the database using GraphQL. We used `admin_pages` endpoint, filtered one page with slug of current page and pulled date of file creation and date of the last edit of the page body (not including metadata like title).

```liquid
{% raw %}
{% graphql page_dates, slug: context.page.slug %}
query get_dates($slug: String!) {
  admin_pages(
    per_page: 1
    filter: { slug: { value: $slug } }
  ) {
    results {
      content_updated_at
      created_at
    }
  }
}
{% endgraphql %}

{% assign dates = page_dates | fetch: 'admin_pages' | fetch: 'results' | first %}
{% endraw %}
```

### Twitter

Twitter uses its own set of metadata to extract for its cards preview.

```html
{% raw %}
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:description" content="{{ description }}" />
<meta name="twitter:title" content="{{ title }}" />
<meta name="twitter:image" content="{{ 'images/pos-logo-2to1.png' | asset_url }}" />
{% endraw %}
```

Let's explain new elements:

* `card` - there are couple different types of cards that Twitter supports, we chose `summary_large_image` because it shows the image in a prolific way
* `image` - Twitter demands image needs to be in 2:1 aspect ratio for `summary_large_image` or it will not show, so we prepared another image for that reason

## Results

Difference in visibility is pretty big, but whats more important, users are able to instantly tell what is the link about, before they click it.

Before:

<img src="{{ 'images/use-cases/social-media-cards/before.jpg' | asset_url }}" alt="Twitter card before adding OpenGraph meta tags" />

After:

<img src="{{ 'images/use-cases/social-media-cards/after.jpg' | asset_url }}" alt="Twitter card after adding OpenGraph meta tags" />

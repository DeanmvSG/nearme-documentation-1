---
converter: markdown
metadata:
  title: Uploads
  description: Uploads are used to store URL and metadata of the user uploaded file.
---

**Upload** are used to store URL and metadata of the user uploaded file.

## Defining

You can define uploads by adding a property with `type` set to `upload`, for example:

```yaml
- name: document
  type: upload
```

## Options

Property `upload` takes an extra `options` parameter, which allows you to configure it.

| Option     | Description   |
|------------| ------------- |
| acl    | If set to `public` (default) the file will be publicly available. If set to `private`, a server side generated signature will be needed in order to access the file  It will be automatically generated by GraphQL when you provide `expires_in` argument to the [property_upload` GraphQL method](https://documentation.platformos.com/api-reference/graphql/propertiesinterface.html#L47).
| content_length | Allows you to set server side validation for minimum (using `gte` key) and maximum file size (using `lte` key) in kilobytes. For example, `lte: 2048` will set the max files size to 2MB.
| versions | Allows you to define up to 10 versions of the image. For each version you can define multiple different processing instructions - compression, resizing etc. This option will be ignored if uploaded file will not be an image. See [List versions options](#versions)
| cache_control | Allows you to set to Cache-Control header returned by the file. Default is `max-age=315576000, public`
| content_disposition | Allows you to set Content-Disposition header. Default is `inline`, you can change it to `attachment`

### Versions

Versions should be define in yml as array. Each element must have a `name` and then a list of options you want to use. Please note that not all combinations make sense. An example configuration might look like this:

```yaml
properties:
- name: photo
  type: upload
  options:
    content_length:
      lte: 2048  # maximum file size will be 2048KB
    versions:
      - name: large_bw    # version name
        output:
          format: jpeg    # output format
          quality: 70     # output quality
        resize:
          width: 1600     # width of the image - in this case max width
          height: 1200    # max height of the image - in this case max height
          fit: inside     # preserve aspect ratio, do not crop the image, make sure all pixels are within viewport
          without_enlargement: false              # if image is smaller than width/height, do not enlarge it
        manipulate:
          greyscale: true   # make image greyscale (similar to css "filter: grayscale(1)")
          blur: 20          # blur using gaussian mask (similar to css "filter: blur(1.5rem)")
          flatten: red      # merge alpha transparency channel (if exists) with given color
      - name: small
        output:
          format: webp
          quality: 80
        resize:
          width: 640
          height: 480
          fit: cover
          position: top   # define the gravity direction or strategy when cropping the image using fit cover or contain
      - name: thumb
        output:
          format: png
          quality: 80
        resize:
          width: 200
          fit: contain
          background: "rgba(255, 255, 255, 0.5)"  # if resized image is not covering whole viewport, set background color
      - name: center
        output:
          format: jpeg
          quality: 100
        resize:
          height: 400
          width: 400
          fit: cover
```

This is exactly the same configuration which we have used in our examples site to demonstrate [Direct s3 upload with uppy](/developer-guide/user-uploads/uploading-files-directly-amazons3-using-uppy). You can see it in action by going to [Direct S3 upload images](https://examples.platform-os.com/direct-s3-upload/images) and uploading an image. Please note you will need to create a free account to access that page if you don't have it yet.

#### Output

`format` [String] - Force Extension of an output image, leave blank if you want to keep format of the original image.

`quality` [Int](0-100) - Quality of the output. 100 being the best (and largest in terms of size). Keep in mind compression has different effects on different formats. Defaults: PNG: `80`, WEBP: `80`, JPEG: `85`

`progressive` [Boolean] - Only `format: jpeg` - use progressive (interlace) scan. Default: `true`

#### Resize

`width` [Int] - width that user passed as a reference. If left undefined, will depend on other parameters to determine size (like: height)
`height` [Int] - height that user passed as a reference. If left undefined, will depend on other parameters to determine size (like: width)

`fit` [String] (`cover`, `contain`, `fill`, `inside`, `outside`) - how the image should be resized to fit both provided dimensions

- `cover`: Crop to cover both provided dimensions (the default).
- `contain`: Embed within both provided dimensions.
- `fill`: Ignore the aspect ratio of the input and stretch to both provided dimensions.
- `inside`: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.
- `outside`: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. Some of these values are based on the object-fit CSS property.

`position` [String] (`top`, `right top`, `right`, `right bottom`, `bottom`, `left bottom`, `left`, `left top`) - position to use when `fit` is `cover` or `contain`. default: `center`

`backgound` [String|Object] - background color when using a fit of contain, parsed by the color module, defaults to black without transparency. Default: `#000000` or `{ r: 0, g: 0, b: 0, alpha: 1 }`.

`withoutEnlargement` [Boolean] - do not enlarge if the width or height are already less than the specified dimensions. default: `false`

#### Manipulate

`greyscale` [Boolean] - Convert to 8-bit greyscale; 256 shades of grey. Default: `false`

`blur` [Int|Float] (0.3 - 1000) - value representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`

`flatten` [String|Object] - Default: `#000000` or `{ r: 0, g: 0, b: 0 }`

## Sending upload to server

To store an upload, you need to first upload a physical file directly to s3. When you do it successfully, you will receive an URL to the actual file - and this URL you need to store in the property. This process is described in detail in [User Upload](/developer-guide/user-uploads/user-uploads).

## Fetching upload from a server

In order to fetch the URL to the uploaded image, you need to use `property_upload`. If you have set ACL to `private`, you will also have to provide `expires_in` argument to generate the signature to access the private file. The signature will automatically expire after the number of seconds you specify. Please note, you will not be able to access the URL when you fetch all properties at once using `properties` in your GraphQL query, as URL is being on the fly inside the `property_upload` method.

You can check example code of how to store the URL and then retrieve it in the next guide - [User Upload](/developer-guide/user-uploads/user-uploads)
